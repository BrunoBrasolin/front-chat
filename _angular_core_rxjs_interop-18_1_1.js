import{assertInInjectionContext as d,inject as a,DestroyRef as u,ɵRuntimeError as h,ɵgetOutputDestroyRef as g,Injector as m,effect as p,untracked as b,signal as y,computed as w}from"@angular/core";import{Observable as f,ReplaySubject as j}from"rxjs";import{takeUntil as k}from"rxjs/operators";function v(n){n||(d(v),n=a(u));let e=new f(t=>n.onDestroy(t.next.bind(t)));return t=>t.pipe(k(e))}var l=class{constructor(e){this.source=e,this.destroyed=!1,this.destroyRef=a(u),this.destroyRef.onDestroy(()=>{this.destroyed=!0})}subscribe(e){if(this.destroyed)throw new h(953,!1);let t=this.source.pipe(v(this.destroyRef)).subscribe({next:r=>e(r)});return{unsubscribe:()=>t.unsubscribe()}}};function I(n,e){return new l(n)}function E(n){let e=g(n);return new f(t=>{e?.onDestroy(()=>t.complete());let r=n.subscribe(i=>t.next(i));return()=>r.unsubscribe()})}function x(n,e){!e?.injector&&d(x);let t=e?.injector??a(m),r=new j(1),i=p(()=>{let s;try{s=n()}catch(c){b(()=>r.error(c));return}b(()=>r.next(s))},{injector:t,manualCleanup:!0});return t.get(u).onDestroy(()=>{i.destroy(),r.complete()}),r.asObservable()}function D(n,e){let t=!e?.manualCleanup;t&&!e?.injector&&d(D);let r=t?e?.injector?.get(u)??a(u):null,i=S(e?.equal),s;e?.requireSync?s=y({kind:0},{equal:i}):s=y({kind:1,value:e?.initialValue},{equal:i});let c=n.subscribe({next:o=>s.set({kind:1,value:o}),error:o=>{if(e?.rejectErrors)throw o;s.set({kind:2,error:o})}});return r?.onDestroy(c.unsubscribe.bind(c)),w(()=>{let o=s();switch(o.kind){case 1:return o.value;case 2:throw o.error;case 0:throw new h(601,"`toSignal()` called with `requireSync` but `Observable` did not emit synchronously.")}},{equal:e?.equal})}function S(n=Object.is){return(e,t)=>e.kind===1&&t.kind===1&&n(e.value,t.value)}export{I as outputFromObservable,E as outputToObservable,v as takeUntilDestroyed,x as toObservable,D as toSignal};/*! Bundled license information:

@angular/core/fesm2022/rxjs-interop.mjs:
  (**
   * @license Angular v18.1.1
   * (c) 2010-2024 Google LLC. https://angular.io/
   * License: MIT
   *)
*/